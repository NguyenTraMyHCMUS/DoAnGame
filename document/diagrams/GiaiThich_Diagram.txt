class Block {
    // đại diện cho mỗi khối Tetris (hình dáng, màu sắc, di chuyển, xoay)
    - id: int   // mã định danh cho loại khối
    - cells: map<int, vector<Position>>  // Các hình dạng của khối ở từng trạng thái xoay
    - cellSize: int    // Kích thước mỗi ô vuông để vẽ trên màn hình
    - rotationState: int    // Trạng thái xoay hiện tại (0, 1, 2, 3)
    - rowOffset: int        // Vị trí hiện tại của khối trên bảng lưới (tọa độ gốc)        
    - columnOffset: int     // Vị trí hiện tại của khối trên bảng lưới (tọa độ gốc)         
    - colors: vector<Color>     // Màu sắc ứng với từng loại khối  
    + Draw(offsetX, offsetY)   // Vẽ khối ra màn hình tại vị trí cụ thể (offset từ lưới)      
    + Move(rows, cols)   // Di chuyển khối sang trái, phải, xuống            
    + GetCellPositions()   // Lấy vị trí các ô (Position) hiện tại của khối để kiểm tra, vẽ, v.v.   
    + Rotate()      // Xoay khối sang trạng thái kế tiếp                
    + UndoRotation()  // Quay lại trạng thái xoay trước đó (nếu va chạm)
}

class Grid {
    // quản lý bảng và các hành động liên quan đến các ô trong game
    - grid[20][10]: int   //  Mảng 2D chứa dữ liệu trạng thái của bảng lưới (0: ô trống, 1: ô đã có khối)          
    - numRows: int     // Số lượng hàng trong bảng (20)              
    - numCols: int     //  Số lượng cột trong bảng (10)           
    - cellSize: int     //  Kích thước của mỗi ô vuông trên màn hình            
    - colors: vector<Color>   // Mảng chứa màu sắc dùng cho các ô trong grid       
    + Initialize()   // Khởi tạo bảng lưới (có thể là tất cả ô trống)                
    + Print()   //  In ra bảng lưới (có thể chỉ dùng để debug)                    
    + Draw()     // Vẽ bảng lưới lên màn hình                    
    + IsCellOutside(row, col)  //  Kiểm tra xem ô có nằm ngoài phạm vi bảng lưới không (ngăn việc di chuyển khối ra ngoài)    
    + IsCellEmpty(row, col)   // Kiểm tra xem ô có trống không       
    + ClearFullRows(): int  // Xóa các dòng đầy và trả về số dòng đã xóa
}

class Game {
    // sử dụng Grid để quản lý bảng và kiểm tra các hành động của khối
    // sử dụng Block để đại diện cho khối Tetris và thay đổi vị trí của nó khi người chơi di chuyển hoặc xoay
    // kiểm tra các điều kiện game over, cập nhật điểm số và điều khiển âm thanhthanh
    // => là lớp điều khiển chính nơi xử lý logic trò chơi và điều khiển các khối TetrisTetris
    - grid: Grid     // Tham chiếu tới đối tượng Grid quản lý bảng lưới                
    - blocks: vector<Block>  //  Mảng chứa tất cả các loại khối Tetris (có thể là các mẫu khối như I, O, L, Z,...)       
    - currentBlock: Block   //  Khối Tetris hiện tại đang rơi xuống        
    - nextBlock: Block    //   Khối Tetris tiếp theo sẽ rơi xuống         
    - rotateSound: Sound   //  Âm thanh khi xoay khối         
    - clearSound: Sound    //  Âm thanh khi xóa dòng đầy         
    - music: Music       //  Âm nhạc nền trong game
    - score: int       // Điểm số hiện tại của trò chơi              
    - gameOver: bool    // Trạng thái game over hay không              
    + Draw()      // Vẽ game (grid, các khối, điểm số...)                   
    + HandleInput()   // Xử lý đầu vào của người chơi (phím di chuyển, xoay, dừng game...)               
    + MoveBlockDown()   // Di chuyển khối xuống một ô trong bảng lưới từ từ theo thời gian       
    + MoveBlockLeft()   //  Di chuyển khối sang trái            
    + MoveBlockRight()   //  Di chuyển khối sang phải          
    + RotateBlock()    //  Xoay khối Tetris             
    + LockBlock()      //  Khóa khối khi nó không thể di chuyển nữa (đặt khối vào bảng lưới)             
    + BlockFits(): bool    //  Kiểm tra xem khối có vừa vặn trong bảng lưới không         
    + GetRandomBlock(): Block     // Lấy một khối Tetris ngẫu nhiên từ danh sách các khối   
    + GetAllBlocks(): vector<Block>  // Lấy tất cả các khối Tetris có sẵn trong game
    + UpdateScore(lines, points)    // Cập nhật điểm số khi xóa các dòng hoặc làm một động tác đặc biệt
    + Reset()    // Đặt lại trạng thái game (khi bắt đầu lại)  
}

class Color{
    + GetCellColors(): vector<Color> // chứa các màu sắc có sẵn trong game. Các màu sắc này sẽ được dùng để tô màu cho các khối Tetris
    - darkGrey, green, ... (extern)
}

/*
Bổ sung thêm kiến thức oop (quy định chung)
+ Đặt dấu _ trước các thuộc tính
+ Sài ++i, --i thay vì i++, i--
+ Mỗi lần khai báo là xuống dòng và phải khởi tạo giá trị mặc định cho biến
+ Hàm => Viết hoa mỗi chữ cái đầu
+ Có thể ssửa lại thuộc tính để trong private, thêm các hàm getter lấy giá trị private ra cho phù hợp 
+ Kế thừa, đa hình 
Bổ sung thêm tính năng:
+ Tự động tăng level khi đặt đủ số điểm => chuyển sang level mới cao hơn
+ Có nút ấn thẳng xuống mà không cần đợi nó di chuyển chuyển từ từ xuống
// bỏ + Có thêm thời gian => hết giờ => thua
+ Giao diện mới vào game 
        1. Bắt đầu
        2. Chọn level: dễ(thời gian chậm -> rơi đều từ từ), vừa (tg nhanh hơn sau mỗi 5 phútphút), khó (tg nhanh hơn nữa ngay từ lúc bắt đầu)
        3. Thoát game
        4. Hình ảnh hướng dẫn
*/
